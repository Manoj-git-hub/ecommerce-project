spring.application.name=ecommerce-backend
# Server Port (optional, default is 8080)
server.port=8080

# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=True&default-authentication-plugin=mysql_native_password
spring.datasource.username=root
spring.datasource.password=MYSQL@@2003

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate Configuration
# JPA/Hibernate Configuration
# Creates/updates table schema automatically based on Java entities
spring.jpa.hibernate.ddl-auto=update
# Shows SQL queries in console (useful for debugging)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# JWT Secret (Used for signing/verifying authentication tokens)
# GENERATE A LONG, RANDOM, AND SECURE STRING FOR PRODUCTION!
# Example of how to generate one in Java: Base64.getEncoder().encodeToString(new byte[64])
app.jwtSecret=voayEsOt6FlWIIZzyKtr0UyuBmD0aN/c5MDu1aFDejt6En19fHwwmiTRzFl89k7qD0T2mWUmJR2yJQrIt+3Cuw==

app.jwtExpirationMs=86400000

# Stripe Configuration (for payment processing)
# This is your Stripe SECRET KEY (starts with sk_test_... or sk_live_...)
# stripe.secret.key removed. If needed, configure it in a custom @ConfigurationProperties class.